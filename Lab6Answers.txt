CS 462 Lab 6 (KRL) Deliverables:

PART 1
echo.krl : https://raw.githubusercontent.com/paperclip27/KRL/master/echo.krl
Echo RID : b506809x1.prod
see_songs.krl : https://raw.githubusercontent.com/paperclip27/KRL/master/see_songs.krl
See Songs RID : b506809x2.prod
My ECI : 32BE4C0A-C34B-11E4-8F76-BF0A040ECC4C

Answers to questions:
1)  output:
	{
		"directives": [{
			"options": {
				"something": "Everything is Awesome"
			},
			"name": "say",
			"meta": {
				"rule_name": "message",
				"txn_id": "592918DC-C78F-11E4-8E25-8277E71C24E1",
				"rid": "b506809x1",
				"eid": "15038657188"
			}
		}]
	}
	
	Only a single directive returned.
	Only a single rule was scheduled and ran, which was the "message" rule from the "echo" ruleset.
		(confirmed by looking at the log files in the devtools)

2)	output:
	{
		"directives": [{
			"options": {
				"something": "Everything is Awesome"
			},
			"name": "say",
			"meta": {
				"rule_name": "message",
				"txn_id": "F54254B8-C799-11E4-B36C-F37887B7806A",
				"rid": "b506809x1",
				"eid": "42409662111"
			}
		}, {
			"options": {
				"song": "Everything is Awesome"
			},
			"name": "sing",
			"meta": {
				"rule_name": "songs",
				"txn_id": "F54254B8-C799-11E4-B36C-F37887B7806A",
				"rid": "b506809x2",
				"eid": "42409662111"
			}
		}]
	}
	
	Two directives returned.
	Two rules were scheduled and ran, both the "message" rule from the "echo" ruleset,
		and the "songs" rule from the "see_song" ruleset

3)	There is a difference because the second time around there were two rules (located in different rulesets)
		listening for the same event instead of just one.  Both the "message" and "songs" rules were listening
		for the "echo::message" event with an "input" parameter.  The pico broadcasts the event to all rulesets,
		so even though the rules are in different rulesets, both of them see the event, and both directives
		returned a response.
		
		
		
PART 2
see_songs_v2.krl : https://raw.githubusercontent.com/paperclip27/KRL/master/see_songs_v2.krl
See Songs V2 RID : b506809x3.prod
My ECI : 32BE4C0A-C34B-11E4-8F76-BF0A040ECC4C

Answers to Questions:
1)	if the "msg_type=song" attribute was sent as a parameter to the event, the directive
	from part 1 woule fire, and I would get a response saying "sing: songTitle'
	It is easy to explain... The select statement in the "songs" rule only fires the event
	if there was an exact match for the given attributes.  If msg_type was anything other
	than "song", the select statement would pass over the event, because it didn't match
	the requirements.

2)	*****SEE BOOK FOR EXPLANATION OF INTERMEDIARIES********

3)	The following snippets of log entries show three things:
	first - the "songs" rule doesn't fire if msg_type is not equal to song
	second - the "song" explicit event is raised from the "songs" rule if msg_type is equal to song
	third - the "find_hymn" explicit event is fired only if input contains "god"
	******************
	PARAMETERS: msg_type is not equal to "song"
	847287348 INFO [no rid] [global] event_attrs:{input:Praises to our GOD, msg_type:moose} 
	BF0A040ECC4C/35919565358/echo/message 
	847287355 INFO [no rid] [global] -----***---- Start Scheduling ----***----- 
	847287356 INFO [no rid] [global] Processing event echo/message for b506809x3 
	847287430 INFO b506809x3 songs -----***---- Event processing finished; assembling response ----***----- 
	*******************
	PARAMETERS: msg_type is equal to "song" BUT input does not contain "god"
	847629604 INFO [no rid] [global] event_attrs:{input:all the small things, msg_type:song} 
	BF0A040ECC4C/9204956749/echo/message 
	847629608 INFO [no rid] [global] -----***---- Start Scheduling ----***----- 
	847629609 INFO [no rid] [global] Processing event echo/message for b506809x3 
	847629643 INFO b506809x3 songs Adding to schedule: b506809x3.prod:songs 
	847629752 INFO b506809x3 songs Context switch to b506809x3:songs for event echo:message 
	847629759 INFO b506809x3 songs -----***---- begin rule execution: songs ----***----- 
	847629767 INFO b506809x3 songs rule fired 
	847629839 INFO b506809x3 songs -----***---- Event processing finished; assembling response ----***----- 
	********************
	PARAMETERS: msg_type is equal to "song" AND input contains "god" (case insensitive)
	847778165 INFO [no rid] [global] event_attrs:{input:GoD is Love, msg_type:song}
	BF0A040ECC4C/58434737683/echo/message 
	847778170 INFO [no rid] [global] -----***---- Start Scheduling ----***----- 
	847778171 INFO [no rid] [global] Processing event echo/message for b506809x3 
	847778206 INFO b506809x3 songs Adding to schedule: b506809x3.prod:songs 
	847778294 INFO b506809x3 songs Context switch to b506809x3:songs for event echo:message 
	847778301 INFO b506809x3 songs -----***---- begin rule execution: songs ----***----- 
	847778309 INFO b506809x3 songs rule fired 
	847778371 INFO b506809x3 find_hymn Adding to schedule: b506809x3.prod:find_hymn 
	847778468 INFO b506809x3 find_hymn Context switch to b506809x3:find_hymn for event explicit:sung 
	847778469 INFO b506809x3 find_hymn -----***---- begin rule execution: find_hymn ----***----- 
	847778477 INFO b506809x3 find_hymn rule fired 
	847778511 INFO b506809x3 find_hymn -----***---- Event processing finished; assembling response ----***---



PART 3
see_songs_v2.krl : https://raw.githubusercontent.com/paperclip27/KRL/master/see_songs_v2.krl
See Songs V2 RID : b506809x3.prod
song_store.krl : https://raw.githubusercontent.com/paperclip27/KRL/master/song_store.krl
Song Store RID : b506809x4.prod
My ECI : 32BE4C0A-C34B-11E4-8F76-BF0A040ECC4C

Answers to Questions:
1)	collect_songs serves as the "event" portion of the event-query API. Whenever an explicit song
	event is detected, the song and a timestamp are stored in an entity variable, which is unique
	for each user. The database of songs will continue to grow whenever there is a new song to
	record.  This takes no extra work on the users part, and occurs behind the scenes.
	The "songs" function serves as the "query portion of the event-query API. Whenever the user
	needs access to the songs collected so far, he can make a request (or query) to this API
	endpoint, and it allows them to peek into the database.
	Together, they provide a way to both store and retrieve data, both push and pull, a full-featured
	event-query API.
2)	All of my song and hymn data is stored as maps in entity variables. This gives me access
	to the map.filter method.  I performed a filter operation on my collection of all songs,
	passing it an anonymous function which would check to see if the specified song existed
	in my all hymns map.  The inner method was very simple, using all_hymns{song}.isnull()
	to see if the song had a matching timestamp in the all_hymns map.  If isnull returned
	true, then the song was a secular song, and should be included in the final set.
	After the filtering finished, I returned the final collection of secular songs.
3)	If provides does not include "songs", then the following error is returned whenever
	anyone attempts to call the function through the Sky API:
	{
		error_str: "Function songs does not exist"
		error: 101
	}
	This basically means that only methods listed in the "provides" statement are accessible
	through the API.
4)	If sharing is set to off, then the following error is returned whenever
	anyone attempts to call a function through the Sky API:
	{
		error_str: "Sharing not on for module b506809x4"
		error: 100
	}
	This basically means that module methods listed in the "provides" statement are only
	accessible if sharing is turned on.  This may be used for rulesets during the development
	process, or for experimental module methods, which should not be accessible in the production
	environment.